/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var Common_msg_pb = require('../Common/msg_pb.js');
goog.exportSymbol('proto.AddInfoReq', null, global);
goog.exportSymbol('proto.ChangeInfoRep', null, global);
goog.exportSymbol('proto.ChangeInfoReq', null, global);
goog.exportSymbol('proto.DelInfoRep', null, global);
goog.exportSymbol('proto.DelInfoReq', null, global);
goog.exportSymbol('proto.InfoList', null, global);
goog.exportSymbol('proto.LoginRep', null, global);
goog.exportSymbol('proto.LoginReq', null, global);
goog.exportSymbol('proto.QueryInfoReq', null, global);
goog.exportSymbol('proto.RegisterRep', null, global);
goog.exportSymbol('proto.RegisterReq', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RegisterReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RegisterReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.RegisterReq.displayName = 'proto.RegisterReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RegisterReq.prototype.toObject = function(opt_includeInstance) {
  return proto.RegisterReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RegisterReq} msg The msg instance to transform.
 * @return {!Object}
 */
proto.RegisterReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: (f = msg.getUser()) && Common_msg_pb.User.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RegisterReq}
 */
proto.RegisterReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RegisterReq;
  return proto.RegisterReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RegisterReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RegisterReq}
 */
proto.RegisterReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new Common_msg_pb.User;
      reader.readMessage(value,Common_msg_pb.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RegisterReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RegisterReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RegisterReq} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.RegisterReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      Common_msg_pb.User.serializeBinaryToWriter
    );
  }
};


/**
 * optional User user = 1;
 * @return {?proto.User}
 */
proto.RegisterReq.prototype.getUser = function() {
  return /** @type{?proto.User} */ (
    jspb.Message.getWrapperField(this, Common_msg_pb.User, 1));
};


/** @param {?proto.User|undefined} value */
proto.RegisterReq.prototype.setUser = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.RegisterReq.prototype.clearUser = function() {
  this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.RegisterReq.prototype.hasUser = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RegisterRep = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RegisterRep, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.RegisterRep.displayName = 'proto.RegisterRep';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RegisterRep.prototype.toObject = function(opt_includeInstance) {
  return proto.RegisterRep.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RegisterRep} msg The msg instance to transform.
 * @return {!Object}
 */
proto.RegisterRep.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: (f = msg.getCode()) && Common_msg_pb.Code.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RegisterRep}
 */
proto.RegisterRep.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RegisterRep;
  return proto.RegisterRep.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RegisterRep} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RegisterRep}
 */
proto.RegisterRep.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new Common_msg_pb.Code;
      reader.readMessage(value,Common_msg_pb.Code.deserializeBinaryFromReader);
      msg.setCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RegisterRep.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RegisterRep.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RegisterRep} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.RegisterRep.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      Common_msg_pb.Code.serializeBinaryToWriter
    );
  }
};


/**
 * optional Code code = 1;
 * @return {?proto.Code}
 */
proto.RegisterRep.prototype.getCode = function() {
  return /** @type{?proto.Code} */ (
    jspb.Message.getWrapperField(this, Common_msg_pb.Code, 1));
};


/** @param {?proto.Code|undefined} value */
proto.RegisterRep.prototype.setCode = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.RegisterRep.prototype.clearCode = function() {
  this.setCode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.RegisterRep.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LoginReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.LoginReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LoginReq.displayName = 'proto.LoginReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LoginReq.prototype.toObject = function(opt_includeInstance) {
  return proto.LoginReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LoginReq} msg The msg instance to transform.
 * @return {!Object}
 */
proto.LoginReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: (f = msg.getUser()) && Common_msg_pb.User.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LoginReq}
 */
proto.LoginReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LoginReq;
  return proto.LoginReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LoginReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LoginReq}
 */
proto.LoginReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new Common_msg_pb.User;
      reader.readMessage(value,Common_msg_pb.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LoginReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LoginReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LoginReq} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.LoginReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      Common_msg_pb.User.serializeBinaryToWriter
    );
  }
};


/**
 * optional User user = 2;
 * @return {?proto.User}
 */
proto.LoginReq.prototype.getUser = function() {
  return /** @type{?proto.User} */ (
    jspb.Message.getWrapperField(this, Common_msg_pb.User, 2));
};


/** @param {?proto.User|undefined} value */
proto.LoginReq.prototype.setUser = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.LoginReq.prototype.clearUser = function() {
  this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LoginReq.prototype.hasUser = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LoginRep = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.LoginRep, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LoginRep.displayName = 'proto.LoginRep';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LoginRep.prototype.toObject = function(opt_includeInstance) {
  return proto.LoginRep.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LoginRep} msg The msg instance to transform.
 * @return {!Object}
 */
proto.LoginRep.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: (f = msg.getCode()) && Common_msg_pb.Code.toObject(includeInstance, f),
    user: (f = msg.getUser()) && Common_msg_pb.User.toObject(includeInstance, f),
    sinfo: (f = msg.getSinfo()) && Common_msg_pb.StatisticalInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LoginRep}
 */
proto.LoginRep.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LoginRep;
  return proto.LoginRep.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LoginRep} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LoginRep}
 */
proto.LoginRep.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new Common_msg_pb.Code;
      reader.readMessage(value,Common_msg_pb.Code.deserializeBinaryFromReader);
      msg.setCode(value);
      break;
    case 2:
      var value = new Common_msg_pb.User;
      reader.readMessage(value,Common_msg_pb.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 3:
      var value = new Common_msg_pb.StatisticalInfo;
      reader.readMessage(value,Common_msg_pb.StatisticalInfo.deserializeBinaryFromReader);
      msg.setSinfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LoginRep.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LoginRep.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LoginRep} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.LoginRep.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      Common_msg_pb.Code.serializeBinaryToWriter
    );
  }
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      Common_msg_pb.User.serializeBinaryToWriter
    );
  }
  f = message.getSinfo();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      Common_msg_pb.StatisticalInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional Code code = 1;
 * @return {?proto.Code}
 */
proto.LoginRep.prototype.getCode = function() {
  return /** @type{?proto.Code} */ (
    jspb.Message.getWrapperField(this, Common_msg_pb.Code, 1));
};


/** @param {?proto.Code|undefined} value */
proto.LoginRep.prototype.setCode = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.LoginRep.prototype.clearCode = function() {
  this.setCode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LoginRep.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional User user = 2;
 * @return {?proto.User}
 */
proto.LoginRep.prototype.getUser = function() {
  return /** @type{?proto.User} */ (
    jspb.Message.getWrapperField(this, Common_msg_pb.User, 2));
};


/** @param {?proto.User|undefined} value */
proto.LoginRep.prototype.setUser = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.LoginRep.prototype.clearUser = function() {
  this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LoginRep.prototype.hasUser = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional StatisticalInfo sInfo = 3;
 * @return {?proto.StatisticalInfo}
 */
proto.LoginRep.prototype.getSinfo = function() {
  return /** @type{?proto.StatisticalInfo} */ (
    jspb.Message.getWrapperField(this, Common_msg_pb.StatisticalInfo, 3));
};


/** @param {?proto.StatisticalInfo|undefined} value */
proto.LoginRep.prototype.setSinfo = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.LoginRep.prototype.clearSinfo = function() {
  this.setSinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LoginRep.prototype.hasSinfo = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.QueryInfoReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.QueryInfoReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.QueryInfoReq.displayName = 'proto.QueryInfoReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.QueryInfoReq.prototype.toObject = function(opt_includeInstance) {
  return proto.QueryInfoReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.QueryInfoReq} msg The msg instance to transform.
 * @return {!Object}
 */
proto.QueryInfoReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    usetype: jspb.Message.getFieldWithDefault(msg, 1, ""),
    starttime: jspb.Message.getFieldWithDefault(msg, 2, 0),
    endtime: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.QueryInfoReq}
 */
proto.QueryInfoReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.QueryInfoReq;
  return proto.QueryInfoReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.QueryInfoReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.QueryInfoReq}
 */
proto.QueryInfoReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsetype(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStarttime(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEndtime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.QueryInfoReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.QueryInfoReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.QueryInfoReq} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.QueryInfoReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsetype();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStarttime();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getEndtime();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional string usetype = 1;
 * @return {string}
 */
proto.QueryInfoReq.prototype.getUsetype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.QueryInfoReq.prototype.setUsetype = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 startTime = 2;
 * @return {number}
 */
proto.QueryInfoReq.prototype.getStarttime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.QueryInfoReq.prototype.setStarttime = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int32 endTime = 3;
 * @return {number}
 */
proto.QueryInfoReq.prototype.getEndtime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.QueryInfoReq.prototype.setEndtime = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AddInfoReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AddInfoReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.AddInfoReq.displayName = 'proto.AddInfoReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AddInfoReq.prototype.toObject = function(opt_includeInstance) {
  return proto.AddInfoReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AddInfoReq} msg The msg instance to transform.
 * @return {!Object}
 */
proto.AddInfoReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    info: (f = msg.getInfo()) && Common_msg_pb.Info.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AddInfoReq}
 */
proto.AddInfoReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AddInfoReq;
  return proto.AddInfoReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AddInfoReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AddInfoReq}
 */
proto.AddInfoReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new Common_msg_pb.Info;
      reader.readMessage(value,Common_msg_pb.Info.deserializeBinaryFromReader);
      msg.setInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AddInfoReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AddInfoReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AddInfoReq} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.AddInfoReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      Common_msg_pb.Info.serializeBinaryToWriter
    );
  }
};


/**
 * optional Info info = 1;
 * @return {?proto.Info}
 */
proto.AddInfoReq.prototype.getInfo = function() {
  return /** @type{?proto.Info} */ (
    jspb.Message.getWrapperField(this, Common_msg_pb.Info, 1));
};


/** @param {?proto.Info|undefined} value */
proto.AddInfoReq.prototype.setInfo = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.AddInfoReq.prototype.clearInfo = function() {
  this.setInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.AddInfoReq.prototype.hasInfo = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DelInfoReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.DelInfoReq.repeatedFields_, null);
};
goog.inherits(proto.DelInfoReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.DelInfoReq.displayName = 'proto.DelInfoReq';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.DelInfoReq.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DelInfoReq.prototype.toObject = function(opt_includeInstance) {
  return proto.DelInfoReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DelInfoReq} msg The msg instance to transform.
 * @return {!Object}
 */
proto.DelInfoReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    idlistList: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DelInfoReq}
 */
proto.DelInfoReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DelInfoReq;
  return proto.DelInfoReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DelInfoReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DelInfoReq}
 */
proto.DelInfoReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array.<number>} */ (reader.readPackedInt32());
      msg.setIdlistList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DelInfoReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DelInfoReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DelInfoReq} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.DelInfoReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdlistList();
  if (f.length > 0) {
    writer.writePackedInt32(
      1,
      f
    );
  }
};


/**
 * repeated int32 idlist = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.DelInfoReq.prototype.getIdlistList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 1));
};


/** @param {!Array.<number>} value */
proto.DelInfoReq.prototype.setIdlistList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.DelInfoReq.prototype.addIdlist = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.DelInfoReq.prototype.clearIdlistList = function() {
  this.setIdlistList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DelInfoRep = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.DelInfoRep.repeatedFields_, null);
};
goog.inherits(proto.DelInfoRep, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.DelInfoRep.displayName = 'proto.DelInfoRep';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.DelInfoRep.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DelInfoRep.prototype.toObject = function(opt_includeInstance) {
  return proto.DelInfoRep.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DelInfoRep} msg The msg instance to transform.
 * @return {!Object}
 */
proto.DelInfoRep.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: (f = msg.getCode()) && Common_msg_pb.Code.toObject(includeInstance, f),
    idlistList: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DelInfoRep}
 */
proto.DelInfoRep.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DelInfoRep;
  return proto.DelInfoRep.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DelInfoRep} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DelInfoRep}
 */
proto.DelInfoRep.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new Common_msg_pb.Code;
      reader.readMessage(value,Common_msg_pb.Code.deserializeBinaryFromReader);
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {!Array.<number>} */ (reader.readPackedInt32());
      msg.setIdlistList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DelInfoRep.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DelInfoRep.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DelInfoRep} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.DelInfoRep.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      Common_msg_pb.Code.serializeBinaryToWriter
    );
  }
  f = message.getIdlistList();
  if (f.length > 0) {
    writer.writePackedInt32(
      2,
      f
    );
  }
};


/**
 * optional Code code = 1;
 * @return {?proto.Code}
 */
proto.DelInfoRep.prototype.getCode = function() {
  return /** @type{?proto.Code} */ (
    jspb.Message.getWrapperField(this, Common_msg_pb.Code, 1));
};


/** @param {?proto.Code|undefined} value */
proto.DelInfoRep.prototype.setCode = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.DelInfoRep.prototype.clearCode = function() {
  this.setCode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.DelInfoRep.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated int32 idlist = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.DelInfoRep.prototype.getIdlistList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 2));
};


/** @param {!Array.<number>} value */
proto.DelInfoRep.prototype.setIdlistList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.DelInfoRep.prototype.addIdlist = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.DelInfoRep.prototype.clearIdlistList = function() {
  this.setIdlistList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ChangeInfoReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ChangeInfoReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ChangeInfoReq.displayName = 'proto.ChangeInfoReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ChangeInfoReq.prototype.toObject = function(opt_includeInstance) {
  return proto.ChangeInfoReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ChangeInfoReq} msg The msg instance to transform.
 * @return {!Object}
 */
proto.ChangeInfoReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    infoid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    changeval: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    changeusetype: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ChangeInfoReq}
 */
proto.ChangeInfoReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ChangeInfoReq;
  return proto.ChangeInfoReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ChangeInfoReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ChangeInfoReq}
 */
proto.ChangeInfoReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInfoid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setChangeval(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setChangeusetype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ChangeInfoReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ChangeInfoReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ChangeInfoReq} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.ChangeInfoReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInfoid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getChangeval();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getChangeusetype();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional int32 infoid = 1;
 * @return {number}
 */
proto.ChangeInfoReq.prototype.getInfoid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ChangeInfoReq.prototype.setInfoid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional float changeval = 2;
 * @return {number}
 */
proto.ChangeInfoReq.prototype.getChangeval = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.ChangeInfoReq.prototype.setChangeval = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string changeusetype = 3;
 * @return {string}
 */
proto.ChangeInfoReq.prototype.getChangeusetype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.ChangeInfoReq.prototype.setChangeusetype = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ChangeInfoRep = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ChangeInfoRep, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ChangeInfoRep.displayName = 'proto.ChangeInfoRep';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ChangeInfoRep.prototype.toObject = function(opt_includeInstance) {
  return proto.ChangeInfoRep.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ChangeInfoRep} msg The msg instance to transform.
 * @return {!Object}
 */
proto.ChangeInfoRep.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: (f = msg.getCode()) && Common_msg_pb.Code.toObject(includeInstance, f),
    info: (f = msg.getInfo()) && Common_msg_pb.Info.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ChangeInfoRep}
 */
proto.ChangeInfoRep.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ChangeInfoRep;
  return proto.ChangeInfoRep.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ChangeInfoRep} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ChangeInfoRep}
 */
proto.ChangeInfoRep.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new Common_msg_pb.Code;
      reader.readMessage(value,Common_msg_pb.Code.deserializeBinaryFromReader);
      msg.setCode(value);
      break;
    case 2:
      var value = new Common_msg_pb.Info;
      reader.readMessage(value,Common_msg_pb.Info.deserializeBinaryFromReader);
      msg.setInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ChangeInfoRep.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ChangeInfoRep.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ChangeInfoRep} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.ChangeInfoRep.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      Common_msg_pb.Code.serializeBinaryToWriter
    );
  }
  f = message.getInfo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      Common_msg_pb.Info.serializeBinaryToWriter
    );
  }
};


/**
 * optional Code code = 1;
 * @return {?proto.Code}
 */
proto.ChangeInfoRep.prototype.getCode = function() {
  return /** @type{?proto.Code} */ (
    jspb.Message.getWrapperField(this, Common_msg_pb.Code, 1));
};


/** @param {?proto.Code|undefined} value */
proto.ChangeInfoRep.prototype.setCode = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.ChangeInfoRep.prototype.clearCode = function() {
  this.setCode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChangeInfoRep.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Info info = 2;
 * @return {?proto.Info}
 */
proto.ChangeInfoRep.prototype.getInfo = function() {
  return /** @type{?proto.Info} */ (
    jspb.Message.getWrapperField(this, Common_msg_pb.Info, 2));
};


/** @param {?proto.Info|undefined} value */
proto.ChangeInfoRep.prototype.setInfo = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.ChangeInfoRep.prototype.clearInfo = function() {
  this.setInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChangeInfoRep.prototype.hasInfo = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.InfoList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.InfoList.repeatedFields_, null);
};
goog.inherits(proto.InfoList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.InfoList.displayName = 'proto.InfoList';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.InfoList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.InfoList.prototype.toObject = function(opt_includeInstance) {
  return proto.InfoList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.InfoList} msg The msg instance to transform.
 * @return {!Object}
 */
proto.InfoList.toObject = function(includeInstance, msg) {
  var f, obj = {
    infolistList: jspb.Message.toObjectList(msg.getInfolistList(),
    Common_msg_pb.Info.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.InfoList}
 */
proto.InfoList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.InfoList;
  return proto.InfoList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.InfoList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.InfoList}
 */
proto.InfoList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new Common_msg_pb.Info;
      reader.readMessage(value,Common_msg_pb.Info.deserializeBinaryFromReader);
      msg.addInfolist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.InfoList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.InfoList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.InfoList} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.InfoList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInfolistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      Common_msg_pb.Info.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Info infolist = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.Info>}
 */
proto.InfoList.prototype.getInfolistList = function() {
  return /** @type{!Array.<!proto.Info>} */ (
    jspb.Message.getRepeatedWrapperField(this, Common_msg_pb.Info, 1));
};


/** @param {!Array.<!proto.Info>} value */
proto.InfoList.prototype.setInfolistList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Info=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Info}
 */
proto.InfoList.prototype.addInfolist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Info, opt_index);
};


proto.InfoList.prototype.clearInfolistList = function() {
  this.setInfolistList([]);
};


goog.object.extend(exports, proto);
